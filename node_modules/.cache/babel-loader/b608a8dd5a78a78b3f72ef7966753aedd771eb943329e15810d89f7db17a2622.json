{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider } from \"firebase/auth\";\nimport { getDatabase, ref, set } from \"firebase/database\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC8Sxq0eIYJIivxuExmLmoYViXpl3-bLXQ\",\n  authDomain: \"veterinaryclinic-422805.firebaseapp.com\",\n  projectId: \"veterinaryclinic-422805\",\n  storageBucket: \"veterinaryclinic-422805.appspot.com\",\n  messagingSenderId: \"385189370632\",\n  appId: \"1:385189370632:web:9dc871608f26d8a2f02abd\",\n  measurementId: \"G-B42DEKS32T\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst auth = getAuth(app);\nconst provider = new GoogleAuthProvider();\nconst database = getDatabase(app); // Make sure this is initialized before defining the save function\n\nfunction save(email, password, username) {\n  // Check if username is defined\n  if (username) {\n    set(ref(database, \"users/\" + username), {\n      email: email,\n      password: password,\n      username: username\n    });\n  } else {\n    // Handle the case when username is not defined\n    // For example, you can save the data under the user's email\n    set(ref(database, \"users/\" + email), {\n      email: email,\n      password: password\n    });\n  }\n}\nexport { auth, provider, save };","map":{"version":3,"names":["initializeApp","getAuth","GoogleAuthProvider","getDatabase","ref","set","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","auth","provider","database","save","email","password","username"],"sources":["D:/workspace/reactjs2/tiktok/src/Components/firebase/firebase.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport {getAuth, GoogleAuthProvider} from \"firebase/auth\"\r\nimport { getDatabase, ref, set } from \"firebase/database\";\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC8Sxq0eIYJIivxuExmLmoYViXpl3-bLXQ\",\r\n  authDomain: \"veterinaryclinic-422805.firebaseapp.com\",\r\n  projectId: \"veterinaryclinic-422805\",\r\n  storageBucket: \"veterinaryclinic-422805.appspot.com\",\r\n  messagingSenderId: \"385189370632\",\r\n  appId: \"1:385189370632:web:9dc871608f26d8a2f02abd\",\r\n  measurementId: \"G-B42DEKS32T\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\nconst auth = getAuth(app);\r\nconst provider = new GoogleAuthProvider();\r\nconst database = getDatabase(app); // Make sure this is initialized before defining the save function\r\n\r\nfunction save(email, password, username) {\r\n  // Check if username is defined\r\n  if (username) {\r\n    set(ref(database, \"users/\" + username), {\r\n      email: email,\r\n      password: password,\r\n      username: username\r\n    });\r\n  } else {\r\n    // Handle the case when username is not defined\r\n    // For example, you can save the data under the user's email\r\n    set(ref(database, \"users/\" + email), {\r\n      email: email,\r\n      password: password\r\n    });\r\n  }\r\n}\r\n\r\n\r\nexport {auth, provider, save};\r\n"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAAQC,OAAO,EAAEC,kBAAkB,QAAO,eAAe;AACzD,SAASC,WAAW,EAAEC,GAAG,EAAEC,GAAG,QAAQ,mBAAmB;;AAEzD;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,yCAAyC;EACrDC,SAAS,EAAE,yBAAyB;EACpCC,aAAa,EAAE,qCAAqC;EACpDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGd,aAAa,CAACM,cAAc,CAAC;AAEzC,MAAMS,IAAI,GAAGd,OAAO,CAACa,GAAG,CAAC;AACzB,MAAME,QAAQ,GAAG,IAAId,kBAAkB,CAAC,CAAC;AACzC,MAAMe,QAAQ,GAAGd,WAAW,CAACW,GAAG,CAAC,CAAC,CAAC;;AAEnC,SAASI,IAAIA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;EACvC;EACA,IAAIA,QAAQ,EAAE;IACZhB,GAAG,CAACD,GAAG,CAACa,QAAQ,EAAE,QAAQ,GAAGI,QAAQ,CAAC,EAAE;MACtCF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;IACZ,CAAC,CAAC;EACJ,CAAC,MAAM;IACL;IACA;IACAhB,GAAG,CAACD,GAAG,CAACa,QAAQ,EAAE,QAAQ,GAAGE,KAAK,CAAC,EAAE;MACnCA,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC,CAAC;EACJ;AACF;AAGA,SAAQL,IAAI,EAAEC,QAAQ,EAAEE,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}