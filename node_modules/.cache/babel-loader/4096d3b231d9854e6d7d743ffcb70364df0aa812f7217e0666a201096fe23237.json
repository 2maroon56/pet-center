{"ast":null,"code":"var _jsxFileName = \"D:\\\\workspace\\\\reactjs2\\\\tiktok\\\\src\\\\Components\\\\googleSignIn\\\\signIn.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { auth, provider } from \"./config\"; // Assuming config file with Firebase settings\nimport { signInWithPopup, signInWithEmailAndPassword, signInWithPhoneNumber, RecaptchaVerifier } from \"firebase/auth\";\nimport Home from \"./Home\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction SignIn() {\n  _s();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [verificationCode, setVerificationCode] = useState(\"\");\n  const [userEmail, setUserEmail] = useState(null); // Track logged-in user email\n  const [error, setError] = useState(null); // Store error messages\n  const [isSigningIn, setIsSigningIn] = useState(false); // Track sign-in state\n  const [confirmationResult, setConfirmationResult] = useState(null); // Store confirmation result\n\n  // reCAPTCHA verifier\n  const recaptcha = new RecaptchaVerifier('recaptcha-container', {\n    'size': 'invisible',\n    'callback': response => {\n      console.log('reCAPTCHA token:', response);\n      // reCAPTCHA token is ready, can proceed with phone number verification\n    }\n  });\n\n  // Handle login with email and password\n  const handleEmailLogin = async event => {\n    event.preventDefault(); // Prevent default form submission behavior\n    setError(null); // Clear any previous errors\n\n    setIsSigningIn(true); // Set signing in state\n\n    try {\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\n      const userEmail = userCredential.user.email;\n      setUserEmail(userEmail);\n      localStorage.setItem(\"email\", userEmail); // Consider secure storage in production\n      console.log('Signed in with email and password:', userCredential);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsSigningIn(false); // Reset signing in state\n    }\n  };\n\n  // Handle Google sign-in\n  const handleGoogleLogin = async () => {\n    try {\n      const data = await signInWithPopup(auth, provider); // Replace 'provider' with your Google Sign-in provider\n      const userEmail = data.user.email;\n      setUserEmail(userEmail);\n      localStorage.setItem(\"email\", userEmail); // Consider secure storage in production\n      console.log('Signed in with Google:', data);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  // Handle phone number sign-up with verification\n  const handlePhoneSignUp = async () => {\n    try {\n      setIsSigningIn(true); // Set signing in state\n\n      const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, recaptcha);\n      setConfirmationResult(confirmationResult);\n      console.log('Confirmation result:', confirmationResult);\n      // Prompt user to enter the verification code sent to their phone\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsSigningIn(false); // Reset signing in state\n    }\n  };\n\n  // Handle phone number verification\n  const handleVerifyPhoneNumber = async event => {\n    event.preventDefault(); // Prevent default form submission\n\n    try {\n      setIsSigningIn(true); // Set signing in state\n\n      const credential = await confirmationResult.confirm(verificationCode);\n      const userEmail = credential.user.email;\n      setUserEmail(userEmail);\n      localStorage.setItem(\"email\", userEmail); // Consider secure storage in production\n      console.log('Signed in with phone number:', credential);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setIsSigningIn(false); // Reset signing in state\n      setConfirmationResult(null); // Clear confirmation result\n      setVerificationCode(\"\"); // Clear verification code\n    }\n  };\n  useEffect(() => {\n    const storedEmail = localStorage.getItem(\"email\");\n    setUserEmail(storedEmail);\n  }, []); // Empty dependency array ensures it runs only once\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"SignIn\",\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this), \" \", !userEmail &&\n    /*#__PURE__*/\n    // Only show login options if not logged in\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleEmailLogin,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          value: email,\n          onChange: event => setEmail(event.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          name: \"password\",\n          value: password,\n          onChange: event => setPassword(event.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isSigningIn,\n          children: isSigningIn ? \"Signing In...\" : \"Login with Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGoogleLogin,\n        disabled: isSigningIn,\n        children: isSigningIn ? \"Signing In...\" : \"Login with Google\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sign Up with Phone Number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), confirmationResult ?\n      /*#__PURE__*/\n      // Display verification code form if confirmation result exists\n      _jsxDEV(\"form\", {\n        onSubmit: handleVerifyPhoneNumber,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"verificationCode\",\n          children: \"Verification Code:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"tel\",\n          id: \"verificationCode\",\n          name: \"verificationCode\",\n          value: verificationCode,\n          onChange: event => setVerificationCode(event.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isSigningIn,\n          children: isSigningIn ? \"Verifying...\" : \"Verify Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 13\n      }, this) :\n      /*#__PURE__*/\n      // Display phone number input form if no confirmation result\n      _jsxDEV(\"form\", {\n        onSubmit: handlePhoneSignUp,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"phoneNumber\",\n          children: \"Phone Number:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"tel\",\n          id: \"phoneNumber\",\n          name: \"phoneNumber\",\n          value: phoneNumber,\n          onChange: event => setPhoneNumber(event.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: isSigningIn,\n          children: isSigningIn ? \"Sending Code...\" : \"Request Verification Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), userEmail && /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(SignIn, \"OEtFGh6q92rWmZRwgCHWLkuI5mI=\");\n_c = SignIn;\n;\nexport default SignIn;\nvar _c;\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"names":["React","useState","useEffect","auth","provider","signInWithPopup","signInWithEmailAndPassword","signInWithPhoneNumber","RecaptchaVerifier","Home","jsxDEV","_jsxDEV","Fragment","_Fragment","SignIn","_s","email","setEmail","password","setPassword","phoneNumber","setPhoneNumber","verificationCode","setVerificationCode","userEmail","setUserEmail","error","setError","isSigningIn","setIsSigningIn","confirmationResult","setConfirmationResult","recaptcha","response","console","log","handleEmailLogin","event","preventDefault","userCredential","user","localStorage","setItem","message","handleGoogleLogin","data","handlePhoneSignUp","handleVerifyPhoneNumber","credential","confirm","storedEmail","getItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","name","value","onChange","target","required","disabled","onClick","_c","$RefreshReg$"],"sources":["D:/workspace/reactjs2/tiktok/src/Components/googleSignIn/signIn.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { auth, provider } from \"./config\"; // Assuming config file with Firebase settings\r\nimport {\r\n  signInWithPopup,\r\n  signInWithEmailAndPassword,\r\n  signInWithPhoneNumber,\r\n  RecaptchaVerifier,\r\n} from \"firebase/auth\";\r\nimport Home from \"./Home\";\r\n\r\nfunction SignIn() {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\r\n  const [verificationCode, setVerificationCode] = useState(\"\");\r\n  const [userEmail, setUserEmail] = useState(null); // Track logged-in user email\r\n  const [error, setError] = useState(null); // Store error messages\r\n  const [isSigningIn, setIsSigningIn] = useState(false); // Track sign-in state\r\n  const [confirmationResult, setConfirmationResult] = useState(null); // Store confirmation result\r\n\r\n  // reCAPTCHA verifier\r\n  const recaptcha = new RecaptchaVerifier('recaptcha-container', {\r\n    'size': 'invisible',\r\n    'callback': (response) => {\r\n      console.log('reCAPTCHA token:', response);\r\n      // reCAPTCHA token is ready, can proceed with phone number verification\r\n    }\r\n  });\r\n\r\n  // Handle login with email and password\r\n  const handleEmailLogin = async (event) => {\r\n    event.preventDefault(); // Prevent default form submission behavior\r\n    setError(null); // Clear any previous errors\r\n\r\n    setIsSigningIn(true); // Set signing in state\r\n\r\n    try {\r\n      const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n      const userEmail = userCredential.user.email;\r\n      setUserEmail(userEmail);\r\n      localStorage.setItem(\"email\", userEmail); // Consider secure storage in production\r\n      console.log('Signed in with email and password:', userCredential);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    } finally {\r\n      setIsSigningIn(false); // Reset signing in state\r\n    }\r\n  };\r\n\r\n  // Handle Google sign-in\r\n  const handleGoogleLogin = async () => {\r\n    try {\r\n      const data = await signInWithPopup(auth, provider); // Replace 'provider' with your Google Sign-in provider\r\n      const userEmail = data.user.email;\r\n      setUserEmail(userEmail);\r\n      localStorage.setItem(\"email\", userEmail); // Consider secure storage in production\r\n      console.log('Signed in with Google:', data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  // Handle phone number sign-up with verification\r\n  const handlePhoneSignUp = async () => {\r\n    try {\r\n      setIsSigningIn(true); // Set signing in state\r\n\r\n      const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, recaptcha);\r\n      setConfirmationResult(confirmationResult);\r\n      console.log('Confirmation result:', confirmationResult);\r\n      // Prompt user to enter the verification code sent to their phone\r\n    } catch (error) {\r\n      setError(error.message);\r\n    } finally {\r\n      setIsSigningIn(false); // Reset signing in state\r\n    }\r\n  };\r\n\r\n  // Handle phone number verification\r\n  const handleVerifyPhoneNumber = async (event) => {\r\n    event.preventDefault(); // Prevent default form submission\r\n\r\n    try {\r\n      setIsSigningIn(true); // Set signing in state\r\n\r\n      const credential = await confirmationResult.confirm(verificationCode);\r\n      const userEmail = credential.user.email;\r\n      setUserEmail(userEmail);\r\n      localStorage.setItem(\"email\", userEmail); // Consider secure storage in production\r\n      console.log('Signed in with phone number:', credential);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    } finally {\r\n      setIsSigningIn(false); // Reset signing in state\r\n      setConfirmationResult(null); // Clear confirmation result\r\n      setVerificationCode(\"\"); // Clear verification code\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storedEmail = localStorage.getItem(\"email\");\r\n    setUserEmail(storedEmail);\r\n  }, []); // Empty dependency array ensures it runs only once\r\n\r\n  return (\r\n    <div className=\"SignIn\">\r\n      {error && <p className=\"error\">{error}</p>} {/* Display error message if any */}\r\n      {!userEmail && ( // Only show login options if not logged in\r\n        <>\r\n          <h2>Login</h2>\r\n          \r\n          <form onSubmit={handleEmailLogin}>\r\n            <label htmlFor=\"email\">Email:</label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={(event) => setEmail(event.target.value)}\r\n              required\r\n            />\r\n            <label htmlFor=\"password\">Password:</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={(event) => setPassword(event.target.value)}\r\n              required\r\n            />\r\n            <button type=\"submit\" disabled={isSigningIn}>\r\n              {isSigningIn ? \"Signing In...\" : \"Login with Email\"}\r\n            </button>\r\n          </form>\r\n          <button onClick={handleGoogleLogin} disabled={isSigningIn}>\r\n            {isSigningIn ? \"Signing In...\" : \"Login with Google\"}\r\n          </button>\r\n\r\n          <h2>Sign Up with Phone Number</h2>\r\n          {confirmationResult ? ( // Display verification code form if confirmation result exists\r\n            <form onSubmit={handleVerifyPhoneNumber}>\r\n              <label htmlFor=\"verificationCode\">Verification Code:</label>\r\n              <input\r\n                type=\"tel\"\r\n                id=\"verificationCode\"\r\n                name=\"verificationCode\"\r\n                value={verificationCode}\r\n                onChange={(event) => setVerificationCode(event.target.value)}\r\n                required\r\n              />\r\n              <button type=\"submit\" disabled={isSigningIn}>\r\n                {isSigningIn ? \"Verifying...\" : \"Verify Code\"}\r\n              </button>\r\n            </form>\r\n          ) : ( // Display phone number input form if no confirmation result\r\n            <form onSubmit={handlePhoneSignUp}>\r\n              <label htmlFor=\"phoneNumber\">Phone Number:</label>\r\n              <input\r\n                type=\"tel\"\r\n                id=\"phoneNumber\"\r\n                name=\"phoneNumber\"\r\n                value={phoneNumber}\r\n                onChange={(event) => setPhoneNumber(event.target.value)}\r\n                required\r\n              />\r\n              <button type=\"submit\" disabled={isSigningIn}>\r\n                {isSigningIn ? \"Sending Code...\" : \"Request Verification Code\"}\r\n              </button>\r\n            </form>\r\n          )}\r\n        </>\r\n      )}\r\n       {userEmail && <Home />}\r\n    </div>\r\n)};\r\n\r\nexport default SignIn;  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}